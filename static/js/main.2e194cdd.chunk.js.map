{"version":3,"sources":["ChessBoard/Chessboard.jsx","reportWebVitals.js","lib/chess.js","Logic/scoring-metrics.js","Logic/board-evaluation.js","Logic/minimax.js","Logic/next-move.js","ChessBoard/chessBoardUtils.js","ChessBoard/index.jsx","index.js"],"names":["chessBoardObj","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Chess","fen","BLACK","WHITE","EMPTY","PAWN","BISHOP","KING","DEFAULT_POSITION","POSSIBLE_RESULTS","PAWN_OFFSETS","b","w","PIECE_OFFSETS","n","r","q","k","ATTACKS","RAYS","SHIFTS","p","FLAGS","NORMAL","CAPTURE","BIG_PAWN","EP_CAPTURE","PROMOTION","KSIDE_CASTLE","QSIDE_CASTLE","BITS","SQUARES","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","ROOKS","square","flag","board","Array","kings","turn","castling","ep_square","half_moves","move_number","history","header","clear","update_setup","generate_fen","reset","load","tokens","split","position","validate_fen","valid","i","length","piece","charAt","indexOf","parseInt","color","put","type","toLowerCase","algebraic","errors","error_number","error","isNaN","test","rows","sum_fields","previous_was_number","empty","toUpperCase","cflags","epflags","join","set_header","args","get","sq","build_move","from","to","flags","promotion","move","captured","generate_moves","options","add_move","moves","rank","push","pieces","len","us","them","swap_color","second_rank","first_sq","last_sq","single_square","legal","j","offset","castling_to","castling_from","attacked","legal_moves","make_move","king_attacked","undo_move","move_to_san","sloppy","output","disambiguator","ambiguities","same_rank","same_file","ambig_from","ambig_to","file","get_disambiguator","in_check","in_checkmate","stripped_san","replace","difference","index","blocked","in_stalemate","insufficient_material","bishops","num_pieces","sq_color","sum","in_threefold_repetition","positions","repetition","slice","pop","old","move_from_san","clean_move","matches","match","f","substring","c","make_pretty","ugly_move","clone","san","obj","dupe","property","trim","str","perft","depth","nodes","KNIGHT","ROOK","QUEEN","keys","ugly_moves","verbose","in_draw","game_over","row","pgn","newline","newline_char","max_width","result","header_exists","reversed_history","move_string","Result","current_width","load_pgn","mask","regex","RegExp","header_string","headers","header_obj","key","value","parse_pgn_header","ms","rav_regex","half_move","object","has_keys","arguments","ascii","s","move_obj","pretty_move","undo","remove","square_color","sq_0x88","move_history","pieceScores","pst_w","k_e","pst_b","reverse","getPieceValue","x","y","absoluteValue","isWhite","Error","getAbsoluteValue","minimax","game","isMaximisingPlayer","alpha","beta","totalEvaluation","evaluateBoard","bestScore","Number","NEGATIVE_INFINITY","possibleMoves","Math","max","console","log","POSITIVE_INFINITY","min","makeBestMove","bestMove","getBestMove","alert","Date","getTime","finalMove","score","minimaxInit","moveTime","onDragStart","source","orientation","search","onDrop","target","$","window","setTimeout","status","moveColor","html","updateStatus","onSnapEnd","jQuery","ChessBoard","props","boardRef","React","createRef","boardId","config","pieceTheme","draggable","this","destroy","className","id","style","width","ref","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e194cdd.chunk.js","sourcesContent":["import React from \"react\";\nimport $ from \"jquery\";\nimport { onDragStart, onDrop, onSnapEnd } from \"./chessBoardUtils\";\n\n// This is a bit of a hack to declare jquery on the window object. It also makes it possible to call window.chessBoard further below\nwindow.$ = window.jQuery = $;\nlet chessBoardObj; // making global since this object needs to be used elsewhere\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.boardRef = React.createRef();\n    this.boardId = \"board1\";\n    const themePath =\n      \"https://chessboardjs.com/img/chesspieces/alpha/{piece}.png\";\n\n    this.board = null;\n\n    this.config = {\n      pieceTheme: themePath,\n      draggable: true,\n      position: \"start\",\n      onDragStart: onDragStart,\n      onDrop: onDrop,\n      onSnapEnd: onSnapEnd,\n    };\n  }\n\n  componentDidMount() {\n    if (window && !window.ChessBoard) return;\n    if (window && !window.$) return;\n\n    chessBoardObj = window.ChessBoard(this.boardId, this.config);\n    // this.chessBoard = window.ChessBoard(this.boardId, this.defaultConfig);\n  }\n\n  componentWillUnmount() {\n    chessBoardObj.destroy();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div\n          id={this.boardId}\n          style={{ width: \"400px\" }}\n          ref={this.boardRef}\n        ></div>\n      </div>\n    );\n  }\n}\n\nexport { chessBoardObj };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*\n * Copyright (c) 2017, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *\n *----------------------------------------------------------------------------*/\n\n/* minified license below  */\n\n/* @license\n * Copyright (c) 2017, Jeff Hlywa (jhlywa@gmail.com)\n * Released under the BSD license\n * https://github.com/jhlywa/chess.js/blob/master/LICENSE\n */\n\nvar Chess = function (fen) {\n  /* jshint indent: false */\n\n  var BLACK = \"b\";\n  var WHITE = \"w\";\n\n  var EMPTY = -1;\n\n  var PAWN = \"p\";\n  var KNIGHT = \"n\";\n  var BISHOP = \"b\";\n  var ROOK = \"r\";\n  var QUEEN = \"q\";\n  var KING = \"k\";\n\n  var SYMBOLS = \"pnbrqkPNBRQK\";\n\n  var DEFAULT_POSITION =\n    \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\n\n  var POSSIBLE_RESULTS = [\"1-0\", \"0-1\", \"1/2-1/2\", \"*\"];\n\n  var PAWN_OFFSETS = {\n    b: [16, 32, 17, 15],\n    w: [-16, -32, -17, -15],\n  };\n\n  var PIECE_OFFSETS = {\n    n: [-18, -33, -31, -14, 18, 33, 31, 14],\n    b: [-17, -15, 17, 15],\n    r: [-16, 1, 16, -1],\n    q: [-17, -16, -15, 1, 17, 16, 15, -1],\n    k: [-17, -16, -15, 1, 17, 16, 15, -1],\n  };\n\n  var ATTACKS = [\n    20,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    24,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    20,\n    0,\n    0,\n    20,\n    0,\n    0,\n    0,\n    0,\n    0,\n    24,\n    0,\n    0,\n    0,\n    0,\n    0,\n    20,\n    0,\n    0,\n    0,\n    0,\n    20,\n    0,\n    0,\n    0,\n    0,\n    24,\n    0,\n    0,\n    0,\n    0,\n    20,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    20,\n    0,\n    0,\n    0,\n    24,\n    0,\n    0,\n    0,\n    20,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    20,\n    0,\n    0,\n    24,\n    0,\n    0,\n    20,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    20,\n    2,\n    24,\n    2,\n    20,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    2,\n    53,\n    56,\n    53,\n    2,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    56,\n    0,\n    56,\n    24,\n    24,\n    24,\n    24,\n    24,\n    24,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    2,\n    53,\n    56,\n    53,\n    2,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    20,\n    2,\n    24,\n    2,\n    20,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    20,\n    0,\n    0,\n    24,\n    0,\n    0,\n    20,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    20,\n    0,\n    0,\n    0,\n    24,\n    0,\n    0,\n    0,\n    20,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    20,\n    0,\n    0,\n    0,\n    0,\n    24,\n    0,\n    0,\n    0,\n    0,\n    20,\n    0,\n    0,\n    0,\n    0,\n    20,\n    0,\n    0,\n    0,\n    0,\n    0,\n    24,\n    0,\n    0,\n    0,\n    0,\n    0,\n    20,\n    0,\n    0,\n    20,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    24,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    20,\n  ];\n\n  var RAYS = [\n    17,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    16,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    15,\n    0,\n    0,\n    17,\n    0,\n    0,\n    0,\n    0,\n    0,\n    16,\n    0,\n    0,\n    0,\n    0,\n    0,\n    15,\n    0,\n    0,\n    0,\n    0,\n    17,\n    0,\n    0,\n    0,\n    0,\n    16,\n    0,\n    0,\n    0,\n    0,\n    15,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    17,\n    0,\n    0,\n    0,\n    16,\n    0,\n    0,\n    0,\n    15,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    17,\n    0,\n    0,\n    16,\n    0,\n    0,\n    15,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    17,\n    0,\n    16,\n    0,\n    15,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    17,\n    16,\n    15,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    -15,\n    -16,\n    -17,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    -15,\n    0,\n    -16,\n    0,\n    -17,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    -15,\n    0,\n    0,\n    -16,\n    0,\n    0,\n    -17,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    -15,\n    0,\n    0,\n    0,\n    -16,\n    0,\n    0,\n    0,\n    -17,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    -15,\n    0,\n    0,\n    0,\n    0,\n    -16,\n    0,\n    0,\n    0,\n    0,\n    -17,\n    0,\n    0,\n    0,\n    0,\n    -15,\n    0,\n    0,\n    0,\n    0,\n    0,\n    -16,\n    0,\n    0,\n    0,\n    0,\n    0,\n    -17,\n    0,\n    0,\n    -15,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    -16,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    -17,\n  ];\n\n  var SHIFTS = { p: 0, n: 1, b: 2, r: 3, q: 4, k: 5 };\n\n  var FLAGS = {\n    NORMAL: \"n\",\n    CAPTURE: \"c\",\n    BIG_PAWN: \"b\",\n    EP_CAPTURE: \"e\",\n    PROMOTION: \"p\",\n    KSIDE_CASTLE: \"k\",\n    QSIDE_CASTLE: \"q\",\n  };\n\n  var BITS = {\n    NORMAL: 1,\n    CAPTURE: 2,\n    BIG_PAWN: 4,\n    EP_CAPTURE: 8,\n    PROMOTION: 16,\n    KSIDE_CASTLE: 32,\n    QSIDE_CASTLE: 64,\n  };\n\n  var RANK_1 = 7;\n  var RANK_2 = 6;\n  var RANK_3 = 5;\n  var RANK_4 = 4;\n  var RANK_5 = 3;\n  var RANK_6 = 2;\n  var RANK_7 = 1;\n  var RANK_8 = 0;\n\n  var SQUARES = {\n    a8: 0,\n    b8: 1,\n    c8: 2,\n    d8: 3,\n    e8: 4,\n    f8: 5,\n    g8: 6,\n    h8: 7,\n    a7: 16,\n    b7: 17,\n    c7: 18,\n    d7: 19,\n    e7: 20,\n    f7: 21,\n    g7: 22,\n    h7: 23,\n    a6: 32,\n    b6: 33,\n    c6: 34,\n    d6: 35,\n    e6: 36,\n    f6: 37,\n    g6: 38,\n    h6: 39,\n    a5: 48,\n    b5: 49,\n    c5: 50,\n    d5: 51,\n    e5: 52,\n    f5: 53,\n    g5: 54,\n    h5: 55,\n    a4: 64,\n    b4: 65,\n    c4: 66,\n    d4: 67,\n    e4: 68,\n    f4: 69,\n    g4: 70,\n    h4: 71,\n    a3: 80,\n    b3: 81,\n    c3: 82,\n    d3: 83,\n    e3: 84,\n    f3: 85,\n    g3: 86,\n    h3: 87,\n    a2: 96,\n    b2: 97,\n    c2: 98,\n    d2: 99,\n    e2: 100,\n    f2: 101,\n    g2: 102,\n    h2: 103,\n    a1: 112,\n    b1: 113,\n    c1: 114,\n    d1: 115,\n    e1: 116,\n    f1: 117,\n    g1: 118,\n    h1: 119,\n  };\n\n  var ROOKS = {\n    w: [\n      { square: SQUARES.a1, flag: BITS.QSIDE_CASTLE },\n      { square: SQUARES.h1, flag: BITS.KSIDE_CASTLE },\n    ],\n    b: [\n      { square: SQUARES.a8, flag: BITS.QSIDE_CASTLE },\n      { square: SQUARES.h8, flag: BITS.KSIDE_CASTLE },\n    ],\n  };\n\n  var board = new Array(128);\n  var kings = { w: EMPTY, b: EMPTY };\n  var turn = WHITE;\n  var castling = { w: 0, b: 0 };\n  var ep_square = EMPTY;\n  var half_moves = 0;\n  var move_number = 1;\n  var history = [];\n  var header = {};\n\n  /* if the user passes in a fen string, load it, else default to\n   * starting position\n   */\n  if (typeof fen === \"undefined\") {\n    load(DEFAULT_POSITION);\n  } else {\n    load(fen);\n  }\n\n  function clear() {\n    board = new Array(128);\n    kings = { w: EMPTY, b: EMPTY };\n    turn = WHITE;\n    castling = { w: 0, b: 0 };\n    ep_square = EMPTY;\n    half_moves = 0;\n    move_number = 1;\n    history = [];\n    header = {};\n    update_setup(generate_fen());\n  }\n\n  function reset() {\n    load(DEFAULT_POSITION);\n  }\n\n  function load(fen) {\n    var tokens = fen.split(/\\s+/);\n    var position = tokens[0];\n    var square = 0;\n\n    if (!validate_fen(fen).valid) {\n      return false;\n    }\n\n    clear();\n\n    for (var i = 0; i < position.length; i++) {\n      var piece = position.charAt(i);\n\n      if (piece === \"/\") {\n        square += 8;\n      } else if (is_digit(piece)) {\n        square += parseInt(piece, 10);\n      } else {\n        var color = piece < \"a\" ? WHITE : BLACK;\n        put({ type: piece.toLowerCase(), color: color }, algebraic(square));\n        square++;\n      }\n    }\n\n    turn = tokens[1];\n\n    if (tokens[2].indexOf(\"K\") > -1) {\n      castling.w |= BITS.KSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf(\"Q\") > -1) {\n      castling.w |= BITS.QSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf(\"k\") > -1) {\n      castling.b |= BITS.KSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf(\"q\") > -1) {\n      castling.b |= BITS.QSIDE_CASTLE;\n    }\n\n    ep_square = tokens[3] === \"-\" ? EMPTY : SQUARES[tokens[3]];\n    half_moves = parseInt(tokens[4], 10);\n    move_number = parseInt(tokens[5], 10);\n\n    update_setup(generate_fen());\n\n    return true;\n  }\n\n  /* TODO: this function is pretty much crap - it validates structure but\n   * completely ignores content (e.g. doesn't verify that each side has a king)\n   * ... we should rewrite this, and ditch the silly error_number field while\n   * we're at it\n   */\n  function validate_fen(fen) {\n    var errors = {\n      0: \"No errors.\",\n      1: \"FEN string must contain six space-delimited fields.\",\n      2: \"6th field (move number) must be a positive integer.\",\n      3: \"5th field (half move counter) must be a non-negative integer.\",\n      4: \"4th field (en-passant square) is invalid.\",\n      5: \"3rd field (castling availability) is invalid.\",\n      6: \"2nd field (side to move) is invalid.\",\n      7: \"1st field (piece positions) does not contain 8 '/'-delimited rows.\",\n      8: \"1st field (piece positions) is invalid [consecutive numbers].\",\n      9: \"1st field (piece positions) is invalid [invalid piece].\",\n      10: \"1st field (piece positions) is invalid [row too large].\",\n      11: \"Illegal en-passant square\",\n    };\n\n    /* 1st criterion: 6 space-seperated fields? */\n    var tokens = fen.split(/\\s+/);\n    if (tokens.length !== 6) {\n      return { valid: false, error_number: 1, error: errors[1] };\n    }\n\n    /* 2nd criterion: move number field is a integer value > 0? */\n    if (isNaN(tokens[5]) || parseInt(tokens[5], 10) <= 0) {\n      return { valid: false, error_number: 2, error: errors[2] };\n    }\n\n    /* 3rd criterion: half move counter is an integer >= 0? */\n    if (isNaN(tokens[4]) || parseInt(tokens[4], 10) < 0) {\n      return { valid: false, error_number: 3, error: errors[3] };\n    }\n\n    /* 4th criterion: 4th field is a valid e.p.-string? */\n    if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n      return { valid: false, error_number: 4, error: errors[4] };\n    }\n\n    /* 5th criterion: 3th field is a valid castle-string? */\n    if (!/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {\n      return { valid: false, error_number: 5, error: errors[5] };\n    }\n\n    /* 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)? */\n    if (!/^(w|b)$/.test(tokens[1])) {\n      return { valid: false, error_number: 6, error: errors[6] };\n    }\n\n    /* 7th criterion: 1st field contains 8 rows? */\n    var rows = tokens[0].split(\"/\");\n    if (rows.length !== 8) {\n      return { valid: false, error_number: 7, error: errors[7] };\n    }\n\n    /* 8th criterion: every row is valid? */\n    for (var i = 0; i < rows.length; i++) {\n      /* check for right sum of fields AND not two numbers in succession */\n      var sum_fields = 0;\n      var previous_was_number = false;\n\n      for (var k = 0; k < rows[i].length; k++) {\n        if (!isNaN(rows[i][k])) {\n          if (previous_was_number) {\n            return { valid: false, error_number: 8, error: errors[8] };\n          }\n          sum_fields += parseInt(rows[i][k], 10);\n          previous_was_number = true;\n        } else {\n          if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n            return { valid: false, error_number: 9, error: errors[9] };\n          }\n          sum_fields += 1;\n          previous_was_number = false;\n        }\n      }\n      if (sum_fields !== 8) {\n        return { valid: false, error_number: 10, error: errors[10] };\n      }\n    }\n\n    if (\n      (tokens[3][1] === \"3\" && tokens[1] === \"w\") ||\n      (tokens[3][1] === \"6\" && tokens[1] === \"b\")\n    ) {\n      return { valid: false, error_number: 11, error: errors[11] };\n    }\n\n    /* everything's okay! */\n    return { valid: true, error_number: 0, error: errors[0] };\n  }\n\n  function generate_fen() {\n    var empty = 0;\n    var fen = \"\";\n\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      if (board[i] === null) {\n        empty++;\n      } else {\n        if (empty > 0) {\n          fen += empty;\n          empty = 0;\n        }\n        var color = board[i].color;\n        var piece = board[i].type;\n\n        fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n      }\n\n      if ((i + 1) & 0x88) {\n        if (empty > 0) {\n          fen += empty;\n        }\n\n        if (i !== SQUARES.h1) {\n          fen += \"/\";\n        }\n\n        empty = 0;\n        i += 8;\n      }\n    }\n\n    var cflags = \"\";\n    if (castling[WHITE] & BITS.KSIDE_CASTLE) {\n      cflags += \"K\";\n    }\n    if (castling[WHITE] & BITS.QSIDE_CASTLE) {\n      cflags += \"Q\";\n    }\n    if (castling[BLACK] & BITS.KSIDE_CASTLE) {\n      cflags += \"k\";\n    }\n    if (castling[BLACK] & BITS.QSIDE_CASTLE) {\n      cflags += \"q\";\n    }\n\n    /* do we have an empty castling flag? */\n    cflags = cflags || \"-\";\n    var epflags = ep_square === EMPTY ? \"-\" : algebraic(ep_square);\n\n    return [fen, turn, cflags, epflags, half_moves, move_number].join(\" \");\n  }\n\n  function set_header(args) {\n    for (var i = 0; i < args.length; i += 2) {\n      if (typeof args[i] === \"string\" && typeof args[i + 1] === \"string\") {\n        header[args[i]] = args[i + 1];\n      }\n    }\n    return header;\n  }\n\n  /* called when the initial board setup is changed with put() or remove().\n   * modifies the SetUp and FEN properties of the header object.  if the FEN is\n   * equal to the default position, the SetUp and FEN are deleted\n   * the setup is only updated if history.length is zero, ie moves haven't been\n   * made.\n   */\n  function update_setup(fen) {\n    if (history.length > 0) return;\n\n    if (fen !== DEFAULT_POSITION) {\n      header[\"SetUp\"] = \"1\";\n      header[\"FEN\"] = fen;\n    } else {\n      delete header[\"SetUp\"];\n      delete header[\"FEN\"];\n    }\n  }\n\n  function get(square) {\n    var piece = board[SQUARES[square]];\n    return piece ? { type: piece.type, color: piece.color } : null;\n  }\n\n  function put(piece, square) {\n    /* check for valid piece object */\n    if (!(\"type\" in piece && \"color\" in piece)) {\n      return false;\n    }\n\n    /* check for piece */\n    if (SYMBOLS.indexOf(piece.type.toLowerCase()) === -1) {\n      return false;\n    }\n\n    /* check for valid square */\n    if (!(square in SQUARES)) {\n      return false;\n    }\n\n    var sq = SQUARES[square];\n\n    /* don't let the user place more than one king */\n    if (\n      piece.type === KING &&\n      !(kings[piece.color] === EMPTY || kings[piece.color] === sq)\n    ) {\n      return false;\n    }\n\n    board[sq] = { type: piece.type, color: piece.color };\n    if (piece.type === KING) {\n      kings[piece.color] = sq;\n    }\n\n    update_setup(generate_fen());\n\n    return true;\n  }\n\n  function remove(square) {\n    var piece = get(square);\n    board[SQUARES[square]] = null;\n    if (piece && piece.type === KING) {\n      kings[piece.color] = EMPTY;\n    }\n\n    update_setup(generate_fen());\n\n    return piece;\n  }\n\n  function build_move(board, from, to, flags, promotion) {\n    var move = {\n      color: turn,\n      from: from,\n      to: to,\n      flags: flags,\n      piece: board[from].type,\n    };\n\n    if (promotion) {\n      move.flags |= BITS.PROMOTION;\n      move.promotion = promotion;\n    }\n\n    if (board[to]) {\n      move.captured = board[to].type;\n    } else if (flags & BITS.EP_CAPTURE) {\n      move.captured = PAWN;\n    }\n    return move;\n  }\n\n  function generate_moves(options) {\n    function add_move(board, moves, from, to, flags) {\n      /* if pawn promotion */\n      if (\n        board[from].type === PAWN &&\n        (rank(to) === RANK_8 || rank(to) === RANK_1)\n      ) {\n        var pieces = [QUEEN, ROOK, BISHOP, KNIGHT];\n        for (var i = 0, len = pieces.length; i < len; i++) {\n          moves.push(build_move(board, from, to, flags, pieces[i]));\n        }\n      } else {\n        moves.push(build_move(board, from, to, flags));\n      }\n    }\n\n    var moves = [];\n    var us = turn;\n    var them = swap_color(us);\n    var second_rank = { b: RANK_7, w: RANK_2 };\n\n    var first_sq = SQUARES.a8;\n    var last_sq = SQUARES.h1;\n    var single_square = false;\n\n    /* do we want legal moves? */\n    var legal =\n      typeof options !== \"undefined\" && \"legal\" in options\n        ? options.legal\n        : true;\n\n    /* are we generating moves for a single square? */\n    if (typeof options !== \"undefined\" && \"square\" in options) {\n      if (options.square in SQUARES) {\n        first_sq = last_sq = SQUARES[options.square];\n        single_square = true;\n      } else {\n        /* invalid square */\n        return [];\n      }\n    }\n\n    for (var i = first_sq; i <= last_sq; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) {\n        i += 7;\n        continue;\n      }\n\n      var piece = board[i];\n      if (piece === null || piece.color !== us) {\n        continue;\n      }\n\n      if (piece.type === PAWN) {\n        /* single square, non-capturing */\n        var square = i + PAWN_OFFSETS[us][0];\n        if (board[square] === null) {\n          add_move(board, moves, i, square, BITS.NORMAL);\n\n          /* double square */\n          var square = i + PAWN_OFFSETS[us][1];\n          if (second_rank[us] === rank(i) && board[square] === null) {\n            add_move(board, moves, i, square, BITS.BIG_PAWN);\n          }\n        }\n\n        /* pawn captures */\n        for (j = 2; j < 4; j++) {\n          var square = i + PAWN_OFFSETS[us][j];\n          if (square & 0x88) continue;\n\n          if (board[square] != null && board[square].color === them) {\n            add_move(board, moves, i, square, BITS.CAPTURE);\n          } else if (square === ep_square) {\n            add_move(board, moves, i, ep_square, BITS.EP_CAPTURE);\n          }\n        }\n      } else {\n        for (var j = 0, len = PIECE_OFFSETS[piece.type].length; j < len; j++) {\n          var offset = PIECE_OFFSETS[piece.type][j];\n          var square = i;\n\n          while (true) {\n            square += offset;\n            if (square & 0x88) break;\n\n            if (board[square] === null) {\n              add_move(board, moves, i, square, BITS.NORMAL);\n            } else {\n              if (board[square].color === us) break;\n              add_move(board, moves, i, square, BITS.CAPTURE);\n              break;\n            }\n\n            /* break, if knight or king */\n            if (piece.type === \"n\" || piece.type === \"k\") break;\n          }\n        }\n      }\n    }\n\n    /* check for castling if: a) we're generating all moves, or b) we're doing\n     * single square move generation on the king's square\n     */\n    if (!single_square || last_sq === kings[us]) {\n      /* king-side castling */\n      if (castling[us] & BITS.KSIDE_CASTLE) {\n        var castling_from = kings[us];\n        var castling_to = castling_from + 2;\n\n        if (\n          board[castling_from + 1] === null &&\n          board[castling_to] === null &&\n          !attacked(them, kings[us]) &&\n          !attacked(them, castling_from + 1) &&\n          !attacked(them, castling_to)\n        ) {\n          add_move(board, moves, kings[us], castling_to, BITS.KSIDE_CASTLE);\n        }\n      }\n\n      /* queen-side castling */\n      if (castling[us] & BITS.QSIDE_CASTLE) {\n        var castling_from = kings[us];\n        var castling_to = castling_from - 2;\n\n        if (\n          board[castling_from - 1] === null &&\n          board[castling_from - 2] === null &&\n          board[castling_from - 3] === null &&\n          !attacked(them, kings[us]) &&\n          !attacked(them, castling_from - 1) &&\n          !attacked(them, castling_to)\n        ) {\n          add_move(board, moves, kings[us], castling_to, BITS.QSIDE_CASTLE);\n        }\n      }\n    }\n\n    /* return all pseudo-legal moves (this includes moves that allow the king\n     * to be captured)\n     */\n    if (!legal) {\n      return moves;\n    }\n\n    /* filter out illegal moves */\n    var legal_moves = [];\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i]);\n      if (!king_attacked(us)) {\n        legal_moves.push(moves[i]);\n      }\n      undo_move();\n    }\n\n    return legal_moves;\n  }\n\n  /* convert a move from 0x88 coordinates to Standard Algebraic Notation\n   * (SAN)\n   *\n   * @param {boolean} sloppy Use the sloppy SAN generator to work around over\n   * disambiguation bugs in Fritz and Chessbase.  See below:\n   *\n   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n   * 4. ... Ne7 is technically the valid SAN\n   */\n  function move_to_san(move, sloppy) {\n    var output = \"\";\n\n    if (move.flags & BITS.KSIDE_CASTLE) {\n      output = \"O-O\";\n    } else if (move.flags & BITS.QSIDE_CASTLE) {\n      output = \"O-O-O\";\n    } else {\n      var disambiguator = get_disambiguator(move, sloppy);\n\n      if (move.piece !== PAWN) {\n        output += move.piece.toUpperCase() + disambiguator;\n      }\n\n      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        if (move.piece === PAWN) {\n          output += algebraic(move.from)[0];\n        }\n        output += \"x\";\n      }\n\n      output += algebraic(move.to);\n\n      if (move.flags & BITS.PROMOTION) {\n        output += \"=\" + move.promotion.toUpperCase();\n      }\n    }\n\n    make_move(move);\n    if (in_check()) {\n      if (in_checkmate()) {\n        output += \"#\";\n      } else {\n        output += \"+\";\n      }\n    }\n    undo_move();\n\n    return output;\n  }\n\n  // parses all of the decorators out of a SAN string\n  function stripped_san(move) {\n    return move.replace(/=/, \"\").replace(/[+#]?[?!]*$/, \"\");\n  }\n\n  function attacked(color, square) {\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) {\n        i += 7;\n        continue;\n      }\n\n      /* if empty square or wrong color */\n      if (board[i] === null || board[i].color !== color) continue;\n\n      var piece = board[i];\n      var difference = i - square;\n      var index = difference + 119;\n\n      if (ATTACKS[index] & (1 << SHIFTS[piece.type])) {\n        if (piece.type === PAWN) {\n          if (difference > 0) {\n            if (piece.color === WHITE) return true;\n          } else {\n            if (piece.color === BLACK) return true;\n          }\n          continue;\n        }\n\n        /* if the piece is a knight or a king */\n        if (piece.type === \"n\" || piece.type === \"k\") return true;\n\n        var offset = RAYS[index];\n        var j = i + offset;\n\n        var blocked = false;\n        while (j !== square) {\n          if (board[j] != null) {\n            blocked = true;\n            break;\n          }\n          j += offset;\n        }\n\n        if (!blocked) return true;\n      }\n    }\n\n    return false;\n  }\n\n  function king_attacked(color) {\n    return attacked(swap_color(color), kings[color]);\n  }\n\n  function in_check() {\n    return king_attacked(turn);\n  }\n\n  function in_checkmate() {\n    return in_check() && generate_moves().length === 0;\n  }\n\n  function in_stalemate() {\n    return !in_check() && generate_moves().length === 0;\n  }\n\n  function insufficient_material() {\n    var pieces = {};\n    var bishops = [];\n    var num_pieces = 0;\n    var sq_color = 0;\n\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      sq_color = (sq_color + 1) % 2;\n      if (i & 0x88) {\n        i += 7;\n        continue;\n      }\n\n      var piece = board[i];\n      if (piece) {\n        pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1;\n        if (piece.type === BISHOP) {\n          bishops.push(sq_color);\n        }\n        num_pieces++;\n      }\n    }\n\n    /* k vs. k */\n    if (num_pieces === 2) {\n      return true;\n    } else if (\n      /* k vs. kn .... or .... k vs. kb */\n      num_pieces === 3 &&\n      (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)\n    ) {\n      return true;\n    } else if (num_pieces === pieces[BISHOP] + 2) {\n      /* kb vs. kb where any number of bishops are all on the same color */\n      var sum = 0;\n      var len = bishops.length;\n      for (var i = 0; i < len; i++) {\n        sum += bishops[i];\n      }\n      if (sum === 0 || sum === len) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function in_threefold_repetition() {\n    /* TODO: while this function is fine for casual use, a better\n     * implementation would use a Zobrist key (instead of FEN). the\n     * Zobrist key would be maintained in the make_move/undo_move functions,\n     * avoiding the costly that we do below.\n     */\n    var moves = [];\n    var positions = {};\n    var repetition = false;\n\n    while (true) {\n      var move = undo_move();\n      if (!move) break;\n      moves.push(move);\n    }\n\n    while (true) {\n      /* remove the last two fields in the FEN string, they're not needed\n       * when checking for draw by rep */\n      var fen = generate_fen().split(\" \").slice(0, 4).join(\" \");\n\n      /* has the position occurred three or move times */\n      positions[fen] = fen in positions ? positions[fen] + 1 : 1;\n      if (positions[fen] >= 3) {\n        repetition = true;\n      }\n\n      if (!moves.length) {\n        break;\n      }\n      make_move(moves.pop());\n    }\n\n    return repetition;\n  }\n\n  function push(move) {\n    history.push({\n      move: move,\n      kings: { b: kings.b, w: kings.w },\n      turn: turn,\n      castling: { b: castling.b, w: castling.w },\n      ep_square: ep_square,\n      half_moves: half_moves,\n      move_number: move_number,\n    });\n  }\n\n  function make_move(move) {\n    var us = turn;\n    var them = swap_color(us);\n    push(move);\n\n    board[move.to] = board[move.from];\n    board[move.from] = null;\n\n    /* if ep capture, remove the captured pawn */\n    if (move.flags & BITS.EP_CAPTURE) {\n      if (turn === BLACK) {\n        board[move.to - 16] = null;\n      } else {\n        board[move.to + 16] = null;\n      }\n    }\n\n    /* if pawn promotion, replace with new piece */\n    if (move.flags & BITS.PROMOTION) {\n      board[move.to] = { type: move.promotion, color: us };\n    }\n\n    /* if we moved the king */\n    if (board[move.to].type === KING) {\n      kings[board[move.to].color] = move.to;\n\n      /* if we castled, move the rook next to the king */\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        var castling_to = move.to - 1;\n        var castling_from = move.to + 1;\n        board[castling_to] = board[castling_from];\n        board[castling_from] = null;\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        var castling_to = move.to + 1;\n        var castling_from = move.to - 2;\n        board[castling_to] = board[castling_from];\n        board[castling_from] = null;\n      }\n\n      /* turn off castling */\n      castling[us] = \"\";\n    }\n\n    /* turn off castling if we move a rook */\n    if (castling[us]) {\n      for (var i = 0, len = ROOKS[us].length; i < len; i++) {\n        if (\n          move.from === ROOKS[us][i].square &&\n          castling[us] & ROOKS[us][i].flag\n        ) {\n          castling[us] ^= ROOKS[us][i].flag;\n          break;\n        }\n      }\n    }\n\n    /* turn off castling if we capture a rook */\n    if (castling[them]) {\n      for (var i = 0, len = ROOKS[them].length; i < len; i++) {\n        if (\n          move.to === ROOKS[them][i].square &&\n          castling[them] & ROOKS[them][i].flag\n        ) {\n          castling[them] ^= ROOKS[them][i].flag;\n          break;\n        }\n      }\n    }\n\n    /* if big pawn move, update the en passant square */\n    if (move.flags & BITS.BIG_PAWN) {\n      if (turn === \"b\") {\n        ep_square = move.to - 16;\n      } else {\n        ep_square = move.to + 16;\n      }\n    } else {\n      ep_square = EMPTY;\n    }\n\n    /* reset the 50 move counter if a pawn is moved or a piece is captured */\n    if (move.piece === PAWN) {\n      half_moves = 0;\n    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n      half_moves = 0;\n    } else {\n      half_moves++;\n    }\n\n    if (turn === BLACK) {\n      move_number++;\n    }\n    turn = swap_color(turn);\n  }\n\n  function undo_move() {\n    var old = history.pop();\n    if (old === null) {\n      return null;\n    }\n\n    var move = old.move;\n    kings = old.kings;\n    turn = old.turn;\n    castling = old.castling;\n    ep_square = old.ep_square;\n    half_moves = old.half_moves;\n    move_number = old.move_number;\n\n    var us = turn;\n    var them = swap_color(turn);\n\n    board[move.from] = board[move.to];\n    board[move.from].type = move.piece; // to undo any promotions\n    board[move.to] = null;\n\n    if (move.flags & BITS.CAPTURE) {\n      board[move.to] = { type: move.captured, color: them };\n    } else if (move.flags & BITS.EP_CAPTURE) {\n      var index;\n      if (us === BLACK) {\n        index = move.to - 16;\n      } else {\n        index = move.to + 16;\n      }\n      board[index] = { type: PAWN, color: them };\n    }\n\n    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n      var castling_to, castling_from;\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        castling_to = move.to + 1;\n        castling_from = move.to - 1;\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        castling_to = move.to - 2;\n        castling_from = move.to + 1;\n      }\n\n      board[castling_to] = board[castling_from];\n      board[castling_from] = null;\n    }\n\n    return move;\n  }\n\n  /* this function is used to uniquely identify ambiguous moves */\n  function get_disambiguator(move, sloppy) {\n    var moves = generate_moves({ legal: !sloppy });\n\n    var from = move.from;\n    var to = move.to;\n    var piece = move.piece;\n\n    var ambiguities = 0;\n    var same_rank = 0;\n    var same_file = 0;\n\n    for (var i = 0, len = moves.length; i < len; i++) {\n      var ambig_from = moves[i].from;\n      var ambig_to = moves[i].to;\n      var ambig_piece = moves[i].piece;\n\n      /* if a move of the same piece type ends on the same to square, we'll\n       * need to add a disambiguator to the algebraic notation\n       */\n      if (piece === ambig_piece && from !== ambig_from && to === ambig_to) {\n        ambiguities++;\n\n        if (rank(from) === rank(ambig_from)) {\n          same_rank++;\n        }\n\n        if (file(from) === file(ambig_from)) {\n          same_file++;\n        }\n      }\n    }\n\n    if (ambiguities > 0) {\n      /* if there exists a similar moving piece on the same rank and file as\n       * the move in question, use the square as the disambiguator\n       */\n      if (same_rank > 0 && same_file > 0) {\n        return algebraic(from);\n      } else if (same_file > 0) {\n        /* if the moving piece rests on the same file, use the rank symbol as the\n         * disambiguator\n         */\n        return algebraic(from).charAt(1);\n      } else {\n        /* else use the file symbol */\n        return algebraic(from).charAt(0);\n      }\n    }\n\n    return \"\";\n  }\n\n  function ascii() {\n    var s = \"   +------------------------+\\n\";\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      /* display the rank */\n      if (file(i) === 0) {\n        s += \" \" + \"87654321\"[rank(i)] + \" |\";\n      }\n\n      /* empty piece */\n      if (board[i] === null) {\n        s += \" . \";\n      } else {\n        var piece = board[i].type;\n        var color = board[i].color;\n        var symbol =\n          color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n        s += \" \" + symbol + \" \";\n      }\n\n      if ((i + 1) & 0x88) {\n        s += \"|\\n\";\n        i += 8;\n      }\n    }\n    s += \"   +------------------------+\\n\";\n    s += \"     a  b  c  d  e  f  g  h\\n\";\n\n    return s;\n  }\n\n  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  function move_from_san(move, sloppy) {\n    // strip off any move decorations: e.g Nf3+?!\n    var clean_move = stripped_san(move);\n\n    // if we're using the sloppy parser run a regex to grab piece, to, and from\n    // this should parse invalid SAN like: Pe2-e4, Rc1c4, Qf3xf7\n    if (sloppy) {\n      var matches = clean_move.match(\n        /([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/\n      );\n      if (matches) {\n        var piece = matches[1];\n        var from = matches[2];\n        var to = matches[3];\n        var promotion = matches[4];\n      }\n    }\n\n    var moves = generate_moves();\n    for (var i = 0, len = moves.length; i < len; i++) {\n      // try the strict parser first, then the sloppy parser if requested\n      // by the user\n      if (\n        clean_move === stripped_san(move_to_san(moves[i])) ||\n        (sloppy && clean_move === stripped_san(move_to_san(moves[i], true)))\n      ) {\n        return moves[i];\n      } else {\n        if (\n          matches &&\n          (!piece || piece.toLowerCase() === moves[i].piece) &&\n          SQUARES[from] === moves[i].from &&\n          SQUARES[to] === moves[i].to &&\n          (!promotion || promotion.toLowerCase() === moves[i].promotion)\n        ) {\n          return moves[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /*****************************************************************************\n   * UTILITY FUNCTIONS\n   ****************************************************************************/\n  function rank(i) {\n    return i >> 4;\n  }\n\n  function file(i) {\n    return i & 15;\n  }\n\n  function algebraic(i) {\n    var f = file(i),\n      r = rank(i);\n    return \"abcdefgh\".substring(f, f + 1) + \"87654321\".substring(r, r + 1);\n  }\n\n  function swap_color(c) {\n    return c === WHITE ? BLACK : WHITE;\n  }\n\n  function is_digit(c) {\n    return \"0123456789\".indexOf(c) !== -1;\n  }\n\n  /* pretty = external move object */\n  function make_pretty(ugly_move) {\n    var move = clone(ugly_move);\n    move.san = move_to_san(move, false);\n    move.to = algebraic(move.to);\n    move.from = algebraic(move.from);\n\n    var flags = \"\";\n\n    for (var flag in BITS) {\n      if (BITS[flag] & move.flags) {\n        flags += FLAGS[flag];\n      }\n    }\n    move.flags = flags;\n\n    return move;\n  }\n\n  function clone(obj) {\n    var dupe = obj instanceof Array ? [] : {};\n\n    for (var property in obj) {\n      if (typeof property === \"object\") {\n        dupe[property] = clone(obj[property]);\n      } else {\n        dupe[property] = obj[property];\n      }\n    }\n\n    return dupe;\n  }\n\n  function trim(str) {\n    return str.replace(/^\\s+|\\s+$/g, \"\");\n  }\n\n  /*****************************************************************************\n   * DEBUGGING UTILITIES\n   ****************************************************************************/\n  function perft(depth) {\n    var moves = generate_moves({ legal: false });\n    var nodes = 0;\n    var color = turn;\n\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i]);\n      if (!king_attacked(color)) {\n        if (depth - 1 > 0) {\n          var child_nodes = perft(depth - 1);\n          nodes += child_nodes;\n        } else {\n          nodes++;\n        }\n      }\n      undo_move();\n    }\n\n    return nodes;\n  }\n\n  return {\n    /***************************************************************************\n     * PUBLIC CONSTANTS (is there a better way to do this?)\n     **************************************************************************/\n    WHITE: WHITE,\n    BLACK: BLACK,\n    PAWN: PAWN,\n    KNIGHT: KNIGHT,\n    BISHOP: BISHOP,\n    ROOK: ROOK,\n    QUEEN: QUEEN,\n    KING: KING,\n    SQUARES: (function () {\n      /* from the ECMA-262 spec (section 12.6.4):\n       * \"The mechanics of enumerating the properties ... is\n       * implementation dependent\"\n       * so: for (var sq in SQUARES) { keys.push(sq); } might not be\n       * ordered correctly\n       */\n      var keys = [];\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n        if (i & 0x88) {\n          i += 7;\n          continue;\n        }\n        keys.push(algebraic(i));\n      }\n      return keys;\n    })(),\n    FLAGS: FLAGS,\n\n    /***************************************************************************\n     * PUBLIC API\n     **************************************************************************/\n    load: function (fen) {\n      return load(fen);\n    },\n\n    reset: function () {\n      return reset();\n    },\n\n    moves: function (options) {\n      /* The internal representation of a chess move is in 0x88 format, and\n       * not meant to be human-readable.  The code below converts the 0x88\n       * square coordinates to algebraic coordinates.  It also prunes an\n       * unnecessary move keys resulting from a verbose call.\n       */\n\n      var ugly_moves = generate_moves(options);\n      var moves = [];\n\n      for (var i = 0, len = ugly_moves.length; i < len; i++) {\n        /* does the user want a full move object (most likely not), or just\n         * SAN\n         */\n        if (\n          typeof options !== \"undefined\" &&\n          \"verbose\" in options &&\n          options.verbose\n        ) {\n          moves.push(make_pretty(ugly_moves[i]));\n        } else {\n          moves.push(move_to_san(ugly_moves[i], false));\n        }\n      }\n\n      return moves;\n    },\n\n    ugly_moves: function (options) {\n      var ugly_moves = generate_moves(options);\n      return ugly_moves;\n    },\n\n    in_check: function () {\n      return in_check();\n    },\n\n    in_checkmate: function () {\n      return in_checkmate();\n    },\n\n    in_stalemate: function () {\n      return in_stalemate();\n    },\n\n    in_draw: function () {\n      return (\n        half_moves >= 100 ||\n        in_stalemate() ||\n        insufficient_material() ||\n        in_threefold_repetition()\n      );\n    },\n\n    insufficient_material: function () {\n      return insufficient_material();\n    },\n\n    in_threefold_repetition: function () {\n      return in_threefold_repetition();\n    },\n\n    game_over: function () {\n      return (\n        half_moves >= 100 ||\n        in_checkmate() ||\n        in_stalemate() ||\n        insufficient_material() ||\n        in_threefold_repetition()\n      );\n    },\n\n    validate_fen: function (fen) {\n      return validate_fen(fen);\n    },\n\n    fen: function () {\n      return generate_fen();\n    },\n\n    board: function () {\n      var output = [],\n        row = [];\n\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n        if (board[i] === null) {\n          row.push(null);\n        } else {\n          row.push({ type: board[i].type, color: board[i].color });\n        }\n        if ((i + 1) & 0x88) {\n          output.push(row);\n          row = [];\n          i += 8;\n        }\n      }\n\n      return output;\n    },\n\n    pgn: function (options) {\n      /* using the specification from http://www.chessclub.com/help/PGN-spec\n       * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n       */\n      var newline =\n        typeof options === \"object\" && typeof options.newline_char === \"string\"\n          ? options.newline_char\n          : \"\\n\";\n      var max_width =\n        typeof options === \"object\" && typeof options.max_width === \"number\"\n          ? options.max_width\n          : 0;\n      var result = [];\n      var header_exists = false;\n\n      /* add the PGN header headerrmation */\n      for (var i in header) {\n        /* TODO: order of enumerated properties in header object is not\n         * guaranteed, see ECMA-262 spec (section 12.6.4)\n         */\n        result.push(\"[\" + i + ' \"' + header[i] + '\"]' + newline);\n        header_exists = true;\n      }\n\n      if (header_exists && history.length) {\n        result.push(newline);\n      }\n\n      /* pop all of history onto reversed_history */\n      var reversed_history = [];\n      while (history.length > 0) {\n        reversed_history.push(undo_move());\n      }\n\n      var moves = [];\n      var move_string = \"\";\n\n      /* build the list of moves.  a move_string looks like: \"3. e3 e6\" */\n      while (reversed_history.length > 0) {\n        var move = reversed_history.pop();\n\n        /* if the position started with black to move, start PGN with 1. ... */\n        if (!history.length && move.color === \"b\") {\n          move_string = move_number + \". ...\";\n        } else if (move.color === \"w\") {\n          /* store the previous generated move_string if we have one */\n          if (move_string.length) {\n            moves.push(move_string);\n          }\n          move_string = move_number + \".\";\n        }\n\n        move_string = move_string + \" \" + move_to_san(move, false);\n        make_move(move);\n      }\n\n      /* are there any other leftover moves? */\n      if (move_string.length) {\n        moves.push(move_string);\n      }\n\n      /* is there a result? */\n      if (typeof header.Result !== \"undefined\") {\n        moves.push(header.Result);\n      }\n\n      /* history should be back to what is was before we started generating PGN,\n       * so join together moves\n       */\n      if (max_width === 0) {\n        return result.join(\"\") + moves.join(\" \");\n      }\n\n      /* wrap the PGN output at max_width */\n      var current_width = 0;\n      for (var i = 0; i < moves.length; i++) {\n        /* if the current move will push past max_width */\n        if (current_width + moves[i].length > max_width && i !== 0) {\n          /* don't end the line with whitespace */\n          if (result[result.length - 1] === \" \") {\n            result.pop();\n          }\n\n          result.push(newline);\n          current_width = 0;\n        } else if (i !== 0) {\n          result.push(\" \");\n          current_width++;\n        }\n        result.push(moves[i]);\n        current_width += moves[i].length;\n      }\n\n      return result.join(\"\");\n    },\n\n    load_pgn: function (pgn, options) {\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy =\n        typeof options !== \"undefined\" && \"sloppy\" in options\n          ? options.sloppy\n          : false;\n\n      function mask(str) {\n        return str.replace(/\\\\/g, \"\\\\\");\n      }\n\n      function has_keys(object) {\n        for (var key in object) {\n          return true;\n        }\n        return false;\n      }\n\n      function parse_pgn_header(header, options) {\n        var newline_char =\n          typeof options === \"object\" &&\n          typeof options.newline_char === \"string\"\n            ? options.newline_char\n            : \"\\r?\\n\";\n        var header_obj = {};\n        var headers = header.split(new RegExp(mask(newline_char)));\n        var key = \"\";\n        var value = \"\";\n\n        for (var i = 0; i < headers.length; i++) {\n          key = headers[i].replace(/^\\[([A-Z][A-Za-z]*)\\s.*\\]$/, \"$1\");\n          value = headers[i].replace(/^\\[[A-Za-z]+\\s\"(.*)\"\\]$/, \"$1\");\n          if (trim(key).length > 0) {\n            header_obj[key] = value;\n          }\n        }\n\n        return header_obj;\n      }\n\n      var newline_char =\n        typeof options === \"object\" && typeof options.newline_char === \"string\"\n          ? options.newline_char\n          : \"\\r?\\n\";\n      var regex = new RegExp(\n        \"^(\\\\[(.|\" +\n          mask(newline_char) +\n          \")*\\\\])\" +\n          \"(\" +\n          mask(newline_char) +\n          \")*\" +\n          \"1.(\" +\n          mask(newline_char) +\n          \"|.)*$\",\n        \"g\"\n      );\n\n      /* get header part of the PGN file */\n      var header_string = pgn.replace(regex, \"$1\");\n\n      /* no info part given, begins with moves */\n      if (header_string[0] !== \"[\") {\n        header_string = \"\";\n      }\n\n      reset();\n\n      /* parse PGN header */\n      var headers = parse_pgn_header(header_string, options);\n      for (var key in headers) {\n        set_header([key, headers[key]]);\n      }\n\n      /* load the starting position indicated by [Setup '1'] and\n       * [FEN position] */\n      if (headers[\"SetUp\"] === \"1\") {\n        if (!(\"FEN\" in headers && load(headers[\"FEN\"]))) {\n          return false;\n        }\n      }\n\n      /* delete header to get the moves */\n      var ms = pgn\n        .replace(header_string, \"\")\n        .replace(new RegExp(mask(newline_char), \"g\"), \" \");\n\n      /* delete comments */\n      ms = ms.replace(/(\\{[^}]+\\})+?/g, \"\");\n\n      /* delete recursive annotation variations */\n      var rav_regex = /(\\([^\\(\\)]+\\))+?/g;\n      while (rav_regex.test(ms)) {\n        ms = ms.replace(rav_regex, \"\");\n      }\n\n      /* delete move numbers */\n      ms = ms.replace(/\\d+\\.(\\.\\.)?/g, \"\");\n\n      /* delete ... indicating black to move */\n      ms = ms.replace(/\\.\\.\\./g, \"\");\n\n      /* delete numeric annotation glyphs */\n      ms = ms.replace(/\\$\\d+/g, \"\");\n\n      /* trim and get array of moves */\n      var moves = trim(ms).split(new RegExp(/\\s+/));\n\n      /* delete empty entries */\n      moves = moves.join(\",\").replace(/,,+/g, \",\").split(\",\");\n      var move = \"\";\n\n      for (var half_move = 0; half_move < moves.length - 1; half_move++) {\n        move = move_from_san(moves[half_move], sloppy);\n\n        /* move not possible! (don't clear the board to examine to show the\n         * latest valid position)\n         */\n        if (move === null) {\n          return false;\n        } else {\n          make_move(move);\n        }\n      }\n\n      /* examine last move */\n      move = moves[moves.length - 1];\n      if (POSSIBLE_RESULTS.indexOf(move) > -1) {\n        if (has_keys(header) && typeof header.Result === \"undefined\") {\n          set_header([\"Result\", move]);\n        }\n      } else {\n        move = move_from_san(move, sloppy);\n        if (move === null) {\n          return false;\n        } else {\n          make_move(move);\n        }\n      }\n      return true;\n    },\n\n    header: function () {\n      return set_header(arguments);\n    },\n\n    ascii: function () {\n      return ascii();\n    },\n\n    turn: function () {\n      return turn;\n    },\n\n    move: function (move, options) {\n      /* The move function can be called with in the following parameters:\n       *\n       * .move('Nxb7')      <- where 'move' is a case-sensitive SAN string\n       *\n       * .move({ from: 'h7', <- where the 'move' is a move object (additional\n       *         to :'h8',      fields are ignored)\n       *         promotion: 'q',\n       *      })\n       */\n\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy =\n        typeof options !== \"undefined\" && \"sloppy\" in options\n          ? options.sloppy\n          : false;\n\n      var move_obj = null;\n\n      if (typeof move === \"string\") {\n        move_obj = move_from_san(move, sloppy);\n      } else if (typeof move === \"object\") {\n        var moves = generate_moves();\n\n        /* convert the pretty move object to an ugly move object */\n        for (var i = 0, len = moves.length; i < len; i++) {\n          if (\n            move.from === algebraic(moves[i].from) &&\n            move.to === algebraic(moves[i].to) &&\n            (!(\"promotion\" in moves[i]) ||\n              move.promotion === moves[i].promotion)\n          ) {\n            move_obj = moves[i];\n            break;\n          }\n        }\n      }\n\n      /* failed to find move */\n      if (!move_obj) {\n        return null;\n      }\n\n      /* need to make a copy of move because we can't generate SAN after the\n       * move is made\n       */\n      var pretty_move = make_pretty(move_obj);\n\n      make_move(move_obj);\n\n      return pretty_move;\n    },\n\n    ugly_move: function (move_obj, options) {\n      var pretty_move = make_pretty(move_obj);\n      make_move(move_obj);\n\n      return pretty_move;\n    },\n\n    undo: function () {\n      var move = undo_move();\n      return move ? make_pretty(move) : null;\n    },\n\n    clear: function () {\n      return clear();\n    },\n\n    put: function (piece, square) {\n      return put(piece, square);\n    },\n\n    get: function (square) {\n      return get(square);\n    },\n\n    remove: function (square) {\n      return remove(square);\n    },\n\n    perft: function (depth) {\n      return perft(depth);\n    },\n\n    square_color: function (square) {\n      if (square in SQUARES) {\n        var sq_0x88 = SQUARES[square];\n        return (rank(sq_0x88) + file(sq_0x88)) % 2 === 0 ? \"light\" : \"dark\";\n      }\n\n      return null;\n    },\n\n    history: function (options) {\n      var reversed_history = [];\n      var move_history = [];\n      var verbose =\n        typeof options !== \"undefined\" &&\n        \"verbose\" in options &&\n        options.verbose;\n\n      while (history.length > 0) {\n        reversed_history.push(undo_move());\n      }\n\n      while (reversed_history.length > 0) {\n        var move = reversed_history.pop();\n        if (verbose) {\n          move_history.push(make_pretty(move));\n        } else {\n          move_history.push(move_to_san(move));\n        }\n        make_move(move);\n      }\n\n      return move_history;\n    },\n  };\n};\n\nexport default Chess;\n","// https://www.chessprogramming.org/Simplified_Evaluation_Function\n// https://github.com/thomasahle/sunfish/blob/master/sunfish.py\n\n// piece values -> represents relative importance of each piece\nexport const pieceScores = { p: 100, n: 320, b: 330, r: 500, q: 900, k: 20000 };\n\n// piece square tables -> represents favourable board positions of each piece\nexport const pst_w = {\n  p: [\n    [100, 100, 100, 100, 105, 100, 100, 100],\n    [78, 83, 86, 73, 102, 82, 85, 90],\n    [7, 29, 21, 44, 40, 31, 44, 7],\n    [-17, 16, -2, 15, 14, 0, 15, -13],\n    [-26, 3, 10, 9, 6, 1, 0, -23],\n    [-22, 9, 5, -11, -10, -2, 3, -19],\n    [-31, 8, -7, -37, -36, -14, 3, -31],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n  ],\n  n: [\n    [-66, -53, -75, -75, -10, -55, -58, -70],\n    [-3, -6, 100, -36, 4, 62, -4, -14],\n    [10, 67, 1, 74, 73, 27, 62, -2],\n    [24, 24, 45, 37, 33, 41, 25, 17],\n    [-1, 5, 31, 21, 22, 35, 2, 0],\n    [-18, 10, 13, 22, 18, 15, 11, -14],\n    [-23, -15, 2, 0, 2, 0, -23, -20],\n    [-74, -23, -26, -24, -19, -35, -22, -69],\n  ],\n  b: [\n    [-59, -78, -82, -76, -23, -107, -37, -50],\n    [-11, 20, 35, -42, -39, 31, 2, -22],\n    [-9, 39, -32, 41, 52, -10, 28, -14],\n    [25, 17, 20, 34, 26, 25, 15, 10],\n    [13, 10, 17, 23, 17, 16, 0, 7],\n    [14, 25, 24, 15, 8, 25, 20, 15],\n    [19, 20, 11, 6, 7, 6, 20, 16],\n    [-7, 2, -15, -12, -14, -15, -10, -10],\n  ],\n  r: [\n    [35, 29, 33, 4, 37, 33, 56, 50],\n    [55, 29, 56, 67, 55, 62, 34, 60],\n    [19, 35, 28, 33, 45, 27, 25, 15],\n    [0, 5, 16, 13, 18, -4, -9, -6],\n    [-28, -35, -16, -21, -13, -29, -46, -30],\n    [-42, -28, -42, -25, -25, -35, -26, -46],\n    [-53, -38, -31, -26, -29, -43, -44, -53],\n    [-30, -24, -18, 5, -2, -18, -31, -32],\n  ],\n  q: [\n    [6, 1, -8, -104, 69, 24, 88, 26],\n    [14, 32, 60, -10, 20, 76, 57, 24],\n    [-2, 43, 32, 60, 72, 63, 43, 2],\n    [1, -16, 22, 17, 25, 20, -13, -6],\n    [-14, -15, -2, -5, -1, -10, -20, -22],\n    [-30, -6, -13, -11, -16, -11, -16, -27],\n    [-36, -18, 0, -19, -15, -15, -21, -38],\n    [-39, -30, -31, -13, -31, -36, -34, -42],\n  ],\n  // king middle game\n  k: [\n    [4, 54, 47, -99, -99, 60, 83, -62],\n    [-32, 10, 55, 56, 56, 55, 10, 3],\n    [-62, 12, -57, 44, -67, 28, 37, -31],\n    [-55, 50, 11, -4, -19, 13, 0, -49],\n    [-55, -43, -52, -28, -51, -47, -8, -50],\n    [-47, -42, -43, -79, -64, -32, -29, -32],\n    [-4, 3, -14, -50, -57, -18, 13, 4],\n    [17, 30, -3, -14, 6, -1, 40, 18],\n  ],\n\n  // king end game\n  k_e: [\n    [-50, -40, -30, -20, -20, -30, -40, -50],\n    [-30, -20, -10, 0, 0, -10, -20, -30],\n    [-30, -10, 20, 30, 30, 20, -10, -30],\n    [-30, -10, 30, 40, 40, 30, -10, -30],\n    [-30, -10, 30, 40, 40, 30, -10, -30],\n    [-30, -10, 20, 30, 30, 20, -10, -30],\n    [-30, -30, 0, 0, 0, 0, -30, -30],\n    [-50, -30, -30, -30, -30, -30, -30, -50],\n  ],\n};\n\nexport const pst_b = {\n  p: pst_w[\"p\"].slice().reverse(),\n  n: pst_w[\"n\"].slice().reverse(),\n  b: pst_w[\"b\"].slice().reverse(),\n  r: pst_w[\"r\"].slice().reverse(),\n  q: pst_w[\"q\"].slice().reverse(),\n  k: pst_w[\"k\"].slice().reverse(),\n  k_e: pst_w[\"k_e\"].slice().reverse(),\n};\n","import { pieceScores, pst_w, pst_b } from \"./scoring-metrics\";\n\n// naive eval function\nexport const evaluateBoard = (board) => {\n  let totalEvaluation = 0;\n  for (var i = 0; i < 8; i++) {\n    for (var j = 0; j < 8; j++) {\n      totalEvaluation = totalEvaluation + getPieceValue(board[i][j], i, j);\n    }\n  }\n  return totalEvaluation;\n};\n\nconst getPieceValue = (piece, x, y) => {\n  if (piece === null) {\n    return 0;\n  }\n  const getAbsoluteValue = (piece, isWhite, x, y) => {\n    if (piece.type === \"p\") {\n      return pieceScores[\"p\"] + (isWhite ? pst_w[\"p\"][y][x] : pst_b[\"p\"][y][x]);\n    } else if (piece.type === \"r\") {\n      return pieceScores[\"r\"] + (isWhite ? pst_w[\"r\"][y][x] : pst_b[\"r\"][y][x]);\n    } else if (piece.type === \"n\") {\n      return pieceScores[\"n\"] + (isWhite ? pst_w[\"n\"][y][x] : pst_b[\"n\"][y][x]);\n    } else if (piece.type === \"b\") {\n      return pieceScores[\"b\"] + (isWhite ? pst_w[\"b\"][y][x] : pst_b[\"b\"][y][x]);\n    } else if (piece.type === \"q\") {\n      return pieceScores[\"q\"] + (isWhite ? pst_w[\"q\"][y][x] : pst_b[\"q\"][y][x]);\n    } else if (piece.type === \"k\") {\n      return pieceScores[\"k\"] + (isWhite ? pst_w[\"k\"][y][x] : pst_b[\"k\"][y][x]);\n    }\n    throw Error(\"Unknown piece type: \" + piece.type);\n  };\n\n  const absoluteValue = getAbsoluteValue(piece, piece.color === \"w\", x, y);\n  return piece.color === \"w\" ? absoluteValue : -absoluteValue; // black pieces have negative score\n};\n","import { evaluateBoard } from \"./board-evaluation\";\n\n// minimax algorithm with alpha-beta pruning for getting best move\n\nexport const minimaxInit = (game, depth, isMaximisingPlayer) => {\n  let bestScore = Number.NEGATIVE_INFINITY,\n    finalMove;\n  const possibleMoves = game.ugly_moves();\n\n  for (const move of possibleMoves) {\n    game.ugly_move(move);\n    const score = minimax(\n      game,\n      depth - 1,\n      !isMaximisingPlayer,\n      Number.NEGATIVE_INFINITY,\n      Number.POSITIVE_INFINITY\n    );\n    game.undo(); // backtracking\n    if (score >= bestScore) {\n      bestScore = score;\n      finalMove = move;\n    }\n  }\n  return finalMove;\n};\n\nconst minimax = (game, depth, isMaximisingPlayer, alpha, beta) => {\n  if (depth === 0) {\n    return -evaluateBoard(game.board()); // we've set black to favour negative score\n  }\n\n  let bestScore;\n  if (isMaximisingPlayer) {\n    bestScore = Number.NEGATIVE_INFINITY;\n    const possibleMoves = game.ugly_moves();\n\n    for (const move of possibleMoves) {\n      game.ugly_move(move);\n      bestScore = Math.max(\n        bestScore,\n        minimax(game, depth - 1, false, alpha, beta)\n      );\n      game.undo(); // backtracking\n\n      alpha = Math.max(alpha, bestScore);\n      if (beta <= alpha) {\n        // pruning\n        console.log(`Pruned at depth ${depth}`);\n        return bestScore;\n      }\n    }\n  } else {\n    bestScore = Number.POSITIVE_INFINITY;\n    const possibleMoves = game.ugly_moves();\n\n    for (const move of possibleMoves) {\n      game.ugly_move(move);\n      bestScore = Math.min(\n        bestScore,\n        minimax(game, depth - 1, true, alpha, beta)\n      );\n      game.undo(); // backtracking\n\n      beta = Math.min(beta, bestScore);\n      if (beta <= alpha) {\n        // pruning\n        console.log(`Pruned at depth ${depth}`);\n        return bestScore;\n      }\n    }\n  }\n\n  return bestScore;\n};\n","import { minimaxInit } from \"./minimax\";\nimport { chessBoardObj } from \"../ChessBoard\";\nimport $ from \"jquery\";\n\nexport const makeBestMove = (game) => {\n  const bestMove = getBestMove(game);\n  game.ugly_move(bestMove);\n  chessBoardObj.position(game.fen());\n  //   renderMoveHistory(game.history());\n  if (game.game_over()) {\n    alert(\"Game over\");\n  }\n};\n\nlet positionCount;\nconst getBestMove = (game) => {\n  if (game.game_over()) {\n    alert(\"Game over\");\n  }\n\n  positionCount = 0;\n  const depth = 3; // parseInt($(\"#search-depth\").find(\":selected\").text());\n\n  const d1 = new Date().getTime();\n  const bestMove = minimaxInit(game, depth, true);\n  const d2 = new Date().getTime();\n  const moveTime = d2 - d1;\n  const positionsPerS = (positionCount * 1000) / moveTime;\n  console.log(`This move took ${moveTime / 1000}s`);\n\n  //   $(\"#position-count\").text(positionCount);\n  //   $(\"#time\").text(moveTime / 1000 + \"s\");\n  //   $(\"#positions-per-s\").text(positionsPerS);\n  return bestMove;\n};\n\n// const renderMoveHistory = (moves) => {\n//   const historyElement = $(\"#move-history\").empty();\n//   historyElement.empty();\n//   for (const i = 0; i < moves.length; i = i + 2) {\n//     historyElement.append(\n//       \"<span>\" +\n//         moves[i] +\n//         \" \" +\n//         (moves[i + 1] ? moves[i + 1] : \" \") +\n//         \"</span><br>\"\n//     );\n//   }\n//   historyElement.scrollTop(historyElement[0].scrollHeight);\n// };\n","import Chess from \"../lib/chess\";\nimport $ from \"jquery\";\nimport { makeBestMove } from \"../Logic/next-move\";\nimport { chessBoardObj } from \"./Chessboard\";\n\n// utilizing a modified version of chess.js from https://github.com/lhartikk/simple-chess-ai/blob/master/lib/js/chess.js\n// the original one's move functions were upto 5 times slower\nconst game = new Chess();\n\nconst updateStatus = () => {\n  let status = \"\";\n\n  let moveColor = \"White\";\n  if (game.turn() === \"b\") {\n    moveColor = \"Black\";\n  }\n\n  // checkmate?\n  if (game.in_checkmate()) {\n    status = \"Game over, \" + moveColor + \" is in checkmate.\";\n  }\n\n  // draw?\n  else if (game.in_draw()) {\n    status = \"Game over, drawn position\";\n  }\n\n  // game still on\n  else {\n    status = moveColor + \" to move\";\n\n    // check?\n    if (game.in_check()) {\n      status += \", \" + moveColor + \" is in check\";\n    }\n  }\n\n  $(\"#status\").html(status);\n  $(\"#fen\").html(game.fen());\n  $(\"#pgn\").html(game.pgn());\n};\n\nexport const onDragStart = (source, piece, position, orientation) => {\n  // do not pick up pieces if the game is over\n  if (game.game_over()) return false;\n\n  if (\n    game.in_checkmate() === true ||\n    game.in_draw() === true ||\n    piece.search(/^b/) !== -1\n  ) {\n    return false;\n  }\n};\n\nexport const onDrop = (source, target) => {\n  // see if the move is legal\n  const move = game.move({\n    from: source,\n    to: target,\n    promotion: \"q\", // always promote to a queen for simplicity\n  });\n\n  // illegal move\n  if (move === null) return \"snapback\";\n  const board = $(\"#board1\");\n  window.setTimeout(makeBestMove, 250, game, board);\n  updateStatus();\n};\n\n// update the board position after the piece snap\n// for castling, en passant, pawn promotion\nexport const onSnapEnd = () => {\n  chessBoardObj.position(game.fen());\n};\n","import ChessBoard, { chessBoardObj } from \"./Chessboard\";\n\nexport default ChessBoard;\nexport { chessBoardObj };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport ChessBoard from './ChessBoard';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChessBoard />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}